{
  "version": 3,
  "sources": ["../../docs/dist/vec.js", "../../docs/dist/tile.js", "../../docs/dist/board.js", "../../docs/dist/statistics.js", "../../docs/dist/game.js"],
  "sourcesContent": ["export default class vec2 {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  toString() {\n    return `[${this.x}, ${this.y}]`;\n  }\n}\nvec2.ZERO = {\n  x: 0,\n  y: 0\n};\n", "import vec2 from \"./vec.js\";\nexport const TILE_SIZE = new vec2(30, 30);\nexport const TILE_GAP = new vec2(3, 3);\nconst TILE_COLOR_HIDDEN = \"rgb(230, 230, 230)\";\nconst TILE_COLOR_RELEAVED = \"rgb(179, 179, 179)\";\nconst TILE_COLOR_RELEAVED_EXPLODED = \"red\";\nexport class Tile {\n  constructor(boardPosition, canvasPosition) {\n    this.boardPosition = boardPosition;\n    this.canvasPosition = canvasPosition;\n    this.state = TileState.Hidden;\n    this.hasBomb = false;\n    this.adjacentBombCount = 0;\n  }\n  draw(ctx) {\n    ctx.fillStyle = this.tileColor();\n    ctx.fillRect(this.canvasPosition.x, this.canvasPosition.y, TILE_SIZE.x, TILE_SIZE.y);\n    const text = this.tileText();\n    if (text.length > 0) {\n      ctx.font = \"20px arial\";\n      ctx.textAlign = \"center\";\n      ctx.fillStyle = this.tileTextColor();\n      ctx.fillText(text, this.canvasPosition.x + TILE_SIZE.x * 0.5, this.canvasPosition.y + TILE_SIZE.y * 0.75);\n    }\n  }\n  tileColor() {\n    switch (this.state) {\n      case TileState.Hidden:\n      case TileState.HiddenFlagged:\n        return TILE_COLOR_HIDDEN;\n      case TileState.Revealed:\n        if (this.hasBomb) {\n          return TILE_COLOR_RELEAVED_EXPLODED;\n        } else {\n          return TILE_COLOR_RELEAVED;\n        }\n    }\n  }\n  tileText() {\n    switch (this.state) {\n      case TileState.Hidden:\n        return \"\";\n      case TileState.HiddenFlagged:\n        return \"F\";\n      case TileState.Revealed:\n        if (this.hasBomb) {\n          return \"B\";\n        } else if (this.adjacentBombCount > 0) {\n          return this.adjacentBombCount.toString();\n        }\n    }\n    return \"\";\n  }\n  tileTextColor() {\n    switch (this.state) {\n      case TileState.HiddenFlagged:\n        return \"red\";\n      case TileState.Revealed:\n        if (this.hasBomb) {\n          return \"black\";\n        } else {\n          switch (this.adjacentBombCount) {\n            case 1:\n              return \"#0000ff\";\n            case 2:\n              return \"#008000\";\n            case 3:\n              return \"#ff0000\";\n            case 4:\n              return \"#000080\";\n            case 5:\n              return \"#800000\";\n            case 6:\n              return \"#008080\";\n            case 7:\n              return \"#000000\";\n            case 8:\n              return \"#800080\";\n          }\n        }\n        ;\n      default:\n        return \"black\";\n    }\n  }\n}\nexport var TileState;\n(function(TileState2) {\n  TileState2[TileState2[\"Hidden\"] = 0] = \"Hidden\";\n  TileState2[TileState2[\"HiddenFlagged\"] = 1] = \"HiddenFlagged\";\n  TileState2[TileState2[\"Revealed\"] = 2] = \"Revealed\";\n})(TileState || (TileState = {}));\n", "import {TILE_GAP, TILE_SIZE, Tile} from \"./tile.js\";\nimport vec2 from \"./vec.js\";\nconst _Board = class {\n  constructor(size, maxBombCount) {\n    this.isPopulated = false;\n    this.tilesData = [];\n    this.touchTimer = void 0;\n    if (size.x < 3 || size.y < 3) {\n      throw new Error(\"Board size should be at least 3x3\");\n    }\n    const canvas = document.getElementById(\"canvas\");\n    if (canvas == null) {\n      throw new Error(\"Canvas not found\");\n    }\n    this.canvas = canvas;\n    const ctx = this.canvas.getContext(\"2d\");\n    if (ctx == null) {\n      throw new Error(\"Couldn't get 2D drawing context from the canvas\");\n    }\n    this.ctx = ctx;\n    this.size = size;\n    this.maxBombCount = maxBombCount;\n    this.bombCount = 0;\n    for (let y = 0; y < size.y; y++) {\n      for (let x = 0; x < size.x; x++) {\n        const boardPos = new vec2(x, y);\n        const canvasPos = this.boardToCanvasPosition(boardPos);\n        this.tilesData.push(new Tile(boardPos, canvasPos));\n      }\n    }\n    this.canvas.addEventListener(\"mousedown\", (ev) => {\n      this.onMouseClick(ev);\n    });\n    this.canvas.addEventListener(\"contextmenu\", (ev) => {\n      ev.preventDefault();\n      return false;\n    });\n    this.canvas.addEventListener(\"touchstart\", (ev) => {\n      this.touchTimer = setTimeout(() => this.onLongTouch(ev), 500);\n    });\n    this.canvas.addEventListener(\"touchend\", (ev) => {\n      if (this.touchTimer) {\n        clearTimeout(this.touchTimer);\n        this.touchTimer = void 0;\n        this.onShortTouch(ev);\n      }\n    });\n    this.canvas.addEventListener(\"touchmove\", (ev) => {\n      if (this.touchTimer) {\n        clearTimeout(this.touchTimer);\n        this.touchTimer = void 0;\n      }\n    });\n    const [w, h] = [\n      TILE_GAP.x + size.x * (TILE_SIZE.x + TILE_GAP.x),\n      TILE_GAP.y + size.y * (TILE_SIZE.y + TILE_GAP.y)\n    ];\n    this.canvas.width = w;\n    this.canvas.height = h;\n    this.canvas.style.width = `${w}px`;\n    this.canvas.style.height = `${h}px`;\n  }\n  draw() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    for (const tile of this.tilesData) {\n      tile.draw(this.ctx);\n    }\n  }\n  getCanvas() {\n    return this.canvas;\n  }\n  getBombCount() {\n    return this.bombCount;\n  }\n  getTile(pos) {\n    const i = this.indexFromPosition(pos);\n    if (i == null) {\n      return null;\n    } else {\n      return this.tilesData[i];\n    }\n  }\n  getTiles() {\n    return this.tilesData;\n  }\n  generateContent(safeSpot) {\n    let availableBombIndices = Array.from({length: this.tilesData.length}, (_, i2) => i2);\n    const i = this.indexFromPosition(safeSpot);\n    if (i == null) {\n      throw _Board.PositionOutOfBoundsError;\n    }\n    const adj = this.getAdjacentPositions(safeSpot).map((p) => this.indexFromPosition(p));\n    let exceptions = [i, ...adj];\n    exceptions.sort((a, b) => b - a);\n    exceptions.forEach((i2) => availableBombIndices.splice(i2, 1));\n    let bombCount = 0;\n    while (bombCount < this.maxBombCount && availableBombIndices.length > 0) {\n      const spotIdx = Math.floor(Math.random() * (availableBombIndices.length - 1));\n      const tileIdx = availableBombIndices[spotIdx];\n      this.tilesData[tileIdx].hasBomb = true;\n      availableBombIndices.splice(spotIdx, 1);\n      bombCount++;\n    }\n    this.bombCount = bombCount;\n    for (let i2 = 0; i2 < this.tilesData.length; i2++) {\n      const pos = this.positionFromIndex(i2);\n      const bombCount2 = this.getAdjacentTiles(pos).filter((t) => t.hasBomb).length;\n      this.tilesData[i2].adjacentBombCount = bombCount2;\n    }\n    this.isPopulated = true;\n  }\n  getAdjacentPositions(pos) {\n    if (!this.isPositionInBounds(pos)) {\n      return [];\n    }\n    return [\n      new vec2(pos.x - 1, pos.y - 1),\n      new vec2(pos.x, pos.y - 1),\n      new vec2(pos.x + 1, pos.y - 1),\n      new vec2(pos.x - 1, pos.y),\n      new vec2(pos.x + 1, pos.y),\n      new vec2(pos.x - 1, pos.y + 1),\n      new vec2(pos.x, pos.y + 1),\n      new vec2(pos.x + 1, pos.y + 1)\n    ].filter((v) => this.isPositionInBounds(v));\n  }\n  getAdjacentTiles(pos) {\n    return this.getAdjacentPositions(pos).map((p) => this.getTile(p)).filter((t) => t != null).map((t) => t);\n  }\n  isPositionInBounds(pos) {\n    return pos.x >= 0 && pos.x < this.size.x && pos.y >= 0 && pos.y < this.size.y;\n  }\n  indexFromPosition(pos) {\n    if (!this.isPositionInBounds(pos)) {\n      return null;\n    }\n    return pos.y * this.size.x + pos.x;\n  }\n  positionFromIndex(i) {\n    if (i < this.size.x * this.size.y) {\n      return new vec2(i % this.size.y, Math.floor(i / this.size.y));\n    } else {\n      throw _Board.IndexOutOfBoundsError;\n    }\n  }\n  boardToCanvasPosition(pos) {\n    return new vec2(TILE_GAP.x + pos.x * (TILE_SIZE.x + TILE_GAP.x), TILE_GAP.y + pos.y * (TILE_SIZE.y + TILE_GAP.y));\n  }\n  canvasToBoardPosition(pos) {\n    const coord = new vec2(Math.floor(pos.x / (TILE_SIZE.x + TILE_GAP.x)), Math.floor(pos.y / (TILE_SIZE.y + TILE_GAP.y)));\n    if (coord.x >= 0 && coord.x < this.size.x && coord.y >= 0 && coord.y < this.size.y) {\n      return coord;\n    }\n    return null;\n  }\n  onMouseClick(ev) {\n    if (this.onTileClicked) {\n      const tile = this.tileFromEvent(ev);\n      if (tile != null) {\n        let tileAction;\n        if (ev.button == 0 || ev.button == 1) {\n          tileAction = TileAction.Primary;\n        } else if (ev.button == 2) {\n          tileAction = TileAction.Secondary;\n        }\n        if (tileAction != void 0) {\n          this.onTileClicked(tile, tileAction);\n        }\n      }\n    }\n  }\n  onShortTouch(ev) {\n    if (this.onTileClicked) {\n      const tile = this.tileFromEvent(ev);\n      if (tile != null) {\n        this.onTileClicked(tile, TileAction.Primary);\n      }\n    }\n  }\n  onLongTouch(ev) {\n    if (this.onTileClicked) {\n      const tile = this.tileFromEvent(ev);\n      if (tile != null) {\n        navigator.vibrate(100);\n        this.onTileClicked(tile, TileAction.Secondary);\n      }\n    }\n  }\n  tileFromEvent(ev) {\n    const offset = this.canvas.getBoundingClientRect();\n    let clientPos;\n    if (ev instanceof MouseEvent) {\n      clientPos = new vec2(ev.clientX, ev.clientY);\n    } else if (ev instanceof TouchEvent) {\n      const touch = ev.touches[0] || ev.changedTouches[0];\n      clientPos = new vec2(touch.clientX, touch.clientY);\n    } else {\n      return null;\n    }\n    const canvasPos = new vec2(clientPos.x - offset.x, clientPos.y - offset.y);\n    const boardPos = this.canvasToBoardPosition(canvasPos);\n    console.log(`canvasPos=${canvasPos}; boardPos=${boardPos}`);\n    if (boardPos != null) {\n      return this.getTile(boardPos);\n    }\n    return null;\n  }\n};\nexport let Board = _Board;\nBoard.PositionOutOfBoundsError = new Error(\"Board position out of bounds\");\nBoard.IndexOutOfBoundsError = new Error(\"Board tile index out of bounds\");\nexport var TileAction;\n(function(TileAction2) {\n  TileAction2[TileAction2[\"Primary\"] = 0] = \"Primary\";\n  TileAction2[TileAction2[\"Secondary\"] = 1] = \"Secondary\";\n})(TileAction || (TileAction = {}));\n", "export default class Statistics {\n  constructor() {\n    this.bombsLeft = 0;\n    this.timerActive = false;\n    this.timeElapsedSec = 0;\n    const bombsLeftElem = document.getElementById(\"bombsLeft\");\n    if (bombsLeftElem == null) {\n      throw new Error(\"Bombs left counter element not found\");\n    }\n    const timeElapsedElem = document.getElementById(\"timeElapsed\");\n    if (timeElapsedElem == null) {\n      throw new Error(\"Elapsed time counter element not found\");\n    }\n    const gameResultElem = document.getElementById(\"gameResult\");\n    if (gameResultElem == null) {\n      throw new Error(\"Game result element not found\");\n    }\n    this.bombsLeftElem = bombsLeftElem;\n    this.timeElapsedElem = timeElapsedElem;\n    this.gameResultElem = gameResultElem;\n  }\n  startTimeCounter() {\n    this.timerActive = true;\n  }\n  stopTimeCounter() {\n    this.timerActive = false;\n  }\n  restartTimeCounter() {\n    this.timeElapsedSec = 0;\n  }\n  updateTimeCounter(dt) {\n    if (this.timerActive) {\n      this.timeElapsedSec += dt;\n    }\n  }\n  announceVictory() {\n    this.gameResultElem.innerHTML = \"You WON!\";\n    this.gameResultElem.style.color = \"green\";\n  }\n  announceLoss() {\n    this.gameResultElem.innerHTML = \"You LOSE!\";\n    this.gameResultElem.style.color = \"red\";\n  }\n  draw() {\n    this.bombsLeftElem.value = this.bombsLeft.toString();\n    this.timeElapsedElem.value = Math.floor(this.timeElapsedSec).toString();\n  }\n}\n", "import {Board, TileAction} from \"./board.js\";\nimport Statistics from \"./statistics.js\";\nimport {TileState} from \"./tile.js\";\nimport vec2 from \"./vec.js\";\nexport default class MinesweeperGame {\n  constructor(board2) {\n    this.stats = new Statistics();\n    this.lastTimestamp = 0;\n    this.board = board2;\n    this.board.onTileClicked = (t, ev) => this.handleTileClick(t, ev);\n  }\n  start() {\n    window.requestAnimationFrame((ts) => this.gameLoop(ts));\n  }\n  gameLoop(timestamp) {\n    const dt = (timestamp - this.lastTimestamp) / 1e3;\n    this.stats.updateTimeCounter(dt);\n    this.stats.draw();\n    this.board.draw();\n    this.lastTimestamp = timestamp;\n    window.requestAnimationFrame((ts) => this.gameLoop(ts));\n  }\n  handleTileClick(tile, action) {\n    switch (action) {\n      case TileAction.Primary:\n        if (!this.board.isPopulated) {\n          this.board.generateContent(tile.boardPosition);\n          this.setBombsLeftCounter();\n          this.stats.startTimeCounter();\n        }\n        if (tile.state == TileState.Hidden) {\n          this.revealTile(tile);\n        } else if (tile.state == TileState.Revealed) {\n          const adj = this.board.getAdjacentTiles(tile.boardPosition);\n          const flaggedCount = adj.filter((t) => t.state == TileState.HiddenFlagged).length;\n          if (flaggedCount >= tile.adjacentBombCount) {\n            this.revealAdjacentTiles(tile);\n          }\n        }\n        break;\n      case TileAction.Secondary:\n        if (tile.state == TileState.Hidden) {\n          tile.state = TileState.HiddenFlagged;\n        } else if (tile.state == TileState.HiddenFlagged) {\n          tile.state = TileState.Hidden;\n        }\n        this.setBombsLeftCounter();\n        break;\n    }\n  }\n  revealTile(tile) {\n    tile.state = TileState.Revealed;\n    if (tile.hasBomb) {\n      console.log(\"You LOSE!\");\n      this.board.getTiles().filter((t) => t.hasBomb).forEach((t) => t.state = TileState.Revealed);\n      this.stats.stopTimeCounter();\n      this.stats.announceLoss();\n    } else {\n      const anyHiddenWithoutBomb = this.board.getTiles().filter((t) => !t.hasBomb && t.state != TileState.Revealed).length > 0;\n      if (!anyHiddenWithoutBomb) {\n        console.log(\"You WON!\");\n        this.stats.stopTimeCounter();\n        this.stats.announceVictory();\n      } else if (tile.adjacentBombCount == 0) {\n        this.revealAdjacentTiles(tile);\n      }\n    }\n  }\n  revealAdjacentTiles(tile) {\n    this.board.getAdjacentTiles(tile.boardPosition).filter((t) => t.state == TileState.Hidden).forEach((t) => this.revealTile(t));\n  }\n  setBombsLeftCounter() {\n    const flaggedCount = this.board.getTiles().filter((t) => t.state == TileState.HiddenFlagged).length;\n    this.stats.bombsLeft = Math.max(0, this.board.getBombCount() - flaggedCount);\n  }\n}\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nconst width = parseInt(urlParams.get(\"width\") ?? \"16\");\nconst height = parseInt(urlParams.get(\"height\") ?? \"16\");\nconst bombCount = parseInt(urlParams.get(\"bombCount\") ?? \"32\");\nconst board = new Board(new vec2(width, height), bombCount);\nconst game = new MinesweeperGame(board);\ngame.start();\n"],
  "mappings": "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",
  "names": []
}
